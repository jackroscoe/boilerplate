@charset "UTF-8";


/*------------------------------------*\
    STYLE.CSS
\*------------------------------------*/

/**
 * Here we pull in some variables, include the inuit.css framework, then add our
 * project-specific components afterwards.
 */

/**
 * Setup Inuit and use our own vars file
 */

/*------------------------------------*\
    VARS.SCSS
\*------------------------------------*/

/**
 * Any variables you find set in inuit.cssÔÇÖ `_vars.scss` that you do not wish to
 * keep, simply redefine here. This means that if inuit.css, for example, sets
 * your `$base-font-size` at 16px and you wish it to be 14px, simply redeclare
 * that variable in this file. inuit.css ignores its own variables in favour of
 * using your own, so you can completely modify how inuit.css works without ever
 * having to alter the framework itself.
 */

/*------------------------------------*\
    $OBJECTS-AND-ABSTRACTIONS
\*------------------------------------*/

/**
 * All of inuit.cssÔÇÖ objects and abstractions are initially turned off by
 * default. This means that you start any project with as little as possible,
 * and introducing objects and abstractions is as simple as switching the
 * following variables to `true`.
 */

/*------------------------------------*\
    $OVERRIDES
\*------------------------------------*/

/**
 * Place any variables that should override inuit.cssÔÇÖ defaults here.
 */

/*------------------------------------*\
    $CUSTOM
\*------------------------------------*/

/**
 * Place any of your own variables that sit on top of inuit.css here.
 */

/*------------------------------------*\
    INUIT.CSS
\*------------------------------------*/

/**
 *
 * inuitcss.com -- @inuitcss -- @csswizardry
 *
 */

/**
 * inuit.css acts as a base stylesheet which you should extend with your own
 * theme stylesheet.
 *
 * inuit.css aims to do the heavy lifting; sorting objects and abstractions,
 * design patterns and fiddly bits of CSS, whilst leaving as much design as
 * possible to you. inuit.css is the scaffolding to your decorator.
 *
 * This stylesheet is heavily documented and contains lots of comments, please
 * take care to read and refer to them as you build. For further support please
 * tweet at @inuitcss.
 *
 * Owing to the amount of comments please only ever use minified CSS in
 * production. This file is purely a dev document.
 *
 * The table of contents below maps to section titles of the same name, to jump
 * to any section simply run a find for $[SECTION-TITLE].
 *
 * Most objects and abstractions come with a chunk of markup that you should be
 * able to paste into any view to quickly see how the CSS works in conjunction
 * with the correct HTML.
 *
 * inuit.css is written to this standard: github.com/csswizardry/CSS-Guidelines
 *
 * LICENSE
 *
 * Copyright 2013 Harry Roberts
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Thank you for choosing inuit.css. May your web fonts render perfectly.
 */

/*------------------------------------*\
    $CONTENTS
\*------------------------------------*/

/**
 * CONTENTS............YouÔÇÖre reading it!
 * WARNING.............Here be dragons!
 * IMPORTS.............Begin importing the sections below
 *
 * MIXINS..............Super-simple Sass stuff
 * NORMALIZE...........normalize.css
 * RESET...............Set some defaults
 * CLEARFIX............
 * SHARED..............Shared declarations
 *
 * MAIN................High-level elements like `html`, `body`, etc.
 * HEADINGS............Double-stranded heading hierarchy
 * PARAGRAPHS..........
 * SMALLPRINT..........Smaller text elements like `small`
 * QUOTES..............
 * CODE................
 * LISTS...............
 * IMAGES..............
 * TABLES..............
 * FORMS...............
 *
 * GRIDS...............Fluid, proportional and nestable grids
 * FLEXBOX.............Crudely emulate flexbox
 * COLUMNS.............CSS3 columns
 * NAV.................A simple abstraction to put a list in horizontal nav mode
 * OPTIONS.............Grouped nav items
 * PAGINATION..........Very stripped back, basic paginator
 * BREADCRUMB..........Simple breadcrumb trail object
 * MEDIA...............Media object
 * MARGINALIA..........Simple marginalia content
 * ISLAND..............Boxed off content
 * BLOCK-LIST..........Blocky lists of content
 * MATRIX..............Gridded lists
 * SPLIT...............A simple split-in-two object
 * THIS-OR-THIS........Options object
 * LINK-COMPLEX........
 * FLYOUT..............Flyout-on-hover object
 * ARROWS..............CSS arrows
 * SPRITE..............Generic spriting element
 * ICON-TEXT...........Icon and text couplings
 * BEAUTONS............Use the beautons micro library
 * LOZENGES............Basic lozenge styles
 * RULES...............Horizontal rules
 * STATS...............Simple stats object
 * GREYBOX.............Wireframing styles
 *
 * WIDTHS..............Width classes for use alongside the grid system etc.
 * PUSH................Push classes for manipulating grids
 * PULL................Pull classes for manipulating grids
 * BRAND...............Helper class to apply brand treatment to elements
 * HELPER..............A series of helper classes to use arbitrarily
 * DEBUG...............Enable to add visual flags for debugging purposes
 */

/*------------------------------------*\
    $WARNING
\*------------------------------------*/

/*
 * inuit.css, being an OO framework, works in keeping with the open/closed
 * principle. The variables you set previously are now being used throughout
 * inuit.css to style everything we need for a base. Any custom styles SHOULD
 * NOT be added or modified in inuit.css directly, but added via your theme
 * stylesheet as per the open/closed principle:
 *
 * csswizardry.com/2012/06/the-open-closed-principle-applied-to-css
 *
 * Try not to edit any CSS beyond this point; if you find you need to do so
 * it is a failing of the framework so please tweet at @inuitcss.
 */

/*------------------------------------*\
    $IMPORTS
\*------------------------------------*/

/**
 * Generic utility styles etc.
 */

/*------------------------------------*\
    $DEFAULTS
\*------------------------------------*/

/**
 * inuit.cssÔÇÖ default variables. Redefine these in your `_vars.scss` file (found
 * in the inuit.css-web-template) to override them.
 */

/*------------------------------------*\
    $DEBUG
\*------------------------------------*/

/**
 * Debug mode will visually highlight any potential markup/accessibility quirks
 * in the browser. Set to `true` or `false`.
 */

/*------------------------------------*\
    $BORDER-BOX
\*------------------------------------*/

/**
 * Do you want all elements to adopt `box-sizing:border-box;` as per
 * paulirish.com/2012/box-sizing-border-box-ftw ?
 */

/*------------------------------------*\
    $BASE
\*------------------------------------*/

/**
 * Base stuff
 */

/**
 * Base font-family. 
 */

/**
 * Default colour for objectsÔÇÖ borders etc.
 */

/*------------------------------------*\
    $RESPONSIVE
\*------------------------------------*/

/**
 * Responsiveness?
 */

/**
 * Responsiveness for widescreen/high resolution desktop monitors and beyond?
 * Note: `$responsive` variable above must be set to true before enabling this.
 */

/**
 * Responsive push and pull produce a LOT of code, only turn them on if you
 * definitely need them.
 */

/**
 * Note: `$push` variable above must be set to true before enabling these.
 */

/**
 * Note: `$pull` variable above must be set to true before enabling these.
 */

/**
 * Tell inuit.css when breakpoints start.
 */

/*------------------------------------*\
    $FONT-SIZES
\*------------------------------------*/

/**
 * Font-sizes (in pixels). Refer to relevant sections for their implementations.
 */

/*------------------------------------*\
    $QUOTES
\*------------------------------------*/

/**
 * English quote marks?
 */

/**
 * If you want English quotes then please do not edit these; theyÔÇÖre only here
 * because Sass needs them.
 */

/**
 * If you need non-English quotes, please alter the following values accordingly:
 */

/*------------------------------------*\
    $BRAND
\*------------------------------------*/

/**
 * Brand stuff
 */

/**
 * How big would you like round corners to be by default?
 */

/*------------------------------------*\
    $OBJECTS AND ABSTRACTIONS
\*------------------------------------*/

/**
 * Which objects and abstractions would you like to use?
 */

/*------------------------------------*\
    $FRAMEWORK
\*------------------------------------*/

/**
 * inuit.css will work these next ones out for use within the framework.
 *
 * Assign our `$base-line-height` to a new spacing var for more transparency.
 */

/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */

/**
 * Style any number of headings in one fell swoop, e.g.:
 *
   .foo{
       @include headings(1, 3){
           color:#BADA55;
       }
    }
 *
 * With thanks to @lar_zzz, @paranoida and @rowanmanning for refining and
 * improving my initial mixin.
 */

/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */

/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 *
   .foo{
       @include vendor(animation, shrink 3s);
   }

   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 *
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */

/**
 * Force overly long spans of text to truncate, e.g.:
 *
   `@include truncate(100%);`
 *
 * Where `$truncation-boundary` is a united measurement.
 */

/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 *
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 *
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 *
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 *
 * `@include arrow(top, left, red)`
 *
 * for just a single, red arrow, or:
 *
 * `@include arrow(bottom, center, red, black)`
 *
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus:
 *
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       @include arrow(top, left, #BADA55, #ACE);
   }
 *
 */

/**
 * Media query mixin.
 *
 * ItÔÇÖs not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming youÔÇÖll want a
 * change at ÔÇÿmobileÔÇÖ. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. ItÔÇÖs flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * lap-and-up
 * portable
 * desk
 * desk-wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */

/* normalize.css v2.1.0 | MIT License | git.io/normalize */

/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */

/*
 * Correct `block` display not defined in IE 8/9.
 */

/*
 * Correct `inline-block` display not defined in IE 8/9.
 */

/*
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

/*
 * Address styling not present in IE 8/9.
 */

/* ==========================================================================
   Base
   ========================================================================== */

/*
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

html {
  font-family: sans-serif;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 2 */
}

/*
 * Remove default margin.
 */

body {
  margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */

/*
 * Address `outline` inconsistency between Chrome and other browsers.
 */

/*
 * Improve readability when focused and also mouse hovered in all browsers.
 */

/* ==========================================================================
   Typography
   ========================================================================== */

/*
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/*
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */

/*
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */

/*
 * Address styling not present in Safari 5 and Chrome.
 */

/*
 * Address differences between Firefox and other browsers.
 */

/*
 * Address styling not present in IE 8/9.
 */

/*
 * Correct font family set oddly in Safari 5 and Chrome.
 */

/*
 * Improve readability of pre-formatted text in all browsers.
 */

/*
 * Set consistent quote types.
 */

/*
 * Address inconsistent and variable font size in all browsers.
 */

/*
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

/* ==========================================================================
   Embedded content
   ========================================================================== */

/*
 * Remove border when inside `a` element in IE 8/9.
 */

/*
 * Correct overflow displayed oddly in IE 9.
 */

/* ==========================================================================
   Figures
   ========================================================================== */

/*
 * Address margin not present in IE 8/9 and Safari 5.
 */

/* ==========================================================================
   Forms
   ========================================================================== */

/*
 * Define consistent border, margin, and padding.
 */

/*
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */

/*
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */

/*
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

/*
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */

/*
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */

/*
 * Re-set default cursor for disabled elements.
 */

/*
 * 1. Address box sizing set to `content-box` in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 */

/*
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */

/*
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */

/*
 * Remove inner padding and border in Firefox 4+.
 */

/*
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */

/* ==========================================================================
   Tables
   ========================================================================== */

/*
 * Remove most spacing between table cells.
 */

/*------------------------------------*\
    $RESET
\*------------------------------------*/

/**
 * A more considered reset; more of a restart...
 * As per: csswizardry.com/2011/10/reset-restarted
 */

/**
* LetÔÇÖs make the box model all nice, shall we...?
*/

*,
*:before,
*:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box;
}

/**
 * The usual...
 */

h1 {
  margin: 0;
  padding: 0;
}

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */

/**
 * Remove underlines from potentially troublesome elements.
 */

/**
 * Apply faux underline via `border-bottom`.
 */

/**
 * So that `alt` text is visually offset if images donÔÇÖt load.
 */

/**
 * Give form elements some cursor interactions...
 */

/*------------------------------------*\
    $CLEARFIX
\*------------------------------------*/

/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the clearfix class with Sass to avoid the `.cf` class appearing over
 * and over in your markup.
 */

/*------------------------------------*\
    $SHARED
\*------------------------------------*/

/**
 * Where `margin-bottom` is concerned, this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */

/**
 * Base elements
 */

h1 {
  margin-bottom: 24px;
  margin-bottom: 1.5rem;
}

/**
 * Doubled up `margin-bottom` helper class.
 */

/**
 * `hr` elements only take up a few pixels, so we need to give them special
 * treatment regarding vertical rhythm.
 */

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once, here.
 */

/**
 * Base styles; unclassed HTML elements etc.
 */

/*------------------------------------*\
    $MAIN
\*------------------------------------*/

html {
  font: 1em/1.5 sans-serif;
  overflow-y: scroll;
  min-height: 100%;
}

/*------------------------------------*\
    $HEADINGS
\*------------------------------------*/

/**
 * As per: csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css
 *
 * When we define a heading we also define a corresponding class to go with it.
 * This allows us to apply, say, `class=alpha` to a `h3`; a double-stranded
 * heading hierarchy.
 */

h1 {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333;
}

/**
 * Heading groups and generic any-heading class.
 * To target any heading of any level simply apply a class of `.hN`, e.g.:
 *
   <hgroup>
       <h1 class=hN>inuit.css</h1>
       <h2 class=hN>Best. Framework. Ever!</h2>
   </hgroup>
 *
 */

/**
 * A series of classes for setting massive type; for use in heroes, mastheads,
 * promos, etc.
 */

/*------------------------------------*\
    $PARAGRAPHS
\*------------------------------------*/

/**
 * The `.lede` class is used to make the introductory text (usually a paragraph)
 * of a document slightly larger.
 */

/*------------------------------------*\
    $SMALLPRINT
\*------------------------------------*/

/**
 * A series of classes for setting tiny type; for use in smallprint etc.
 */

/*------------------------------------*\
    $QUOTES
\*------------------------------------*/

/**
 * If English quotes are set in `_vars.scss`, define them here.
 */

/**
 * Big up @boblet: html5doctor.com/blockquote-q-cite
 */

/**
 * Inline quotes.
 */

/**
 *
   <blockquote>
       <p>Insanity: doing the same thing over and over again and expecting
       different results.</p>
       <b class=source>Albert Einstein</b>
   </blockquote>
 *
 */

/*------------------------------------*\
    $CODE
\*------------------------------------*/

/**
 * Use an explicit font stack to ensure browsers render correct `line-height`.
 */

/**
 * Add comments to your code examples, e.g.:
 *
   <code>&lt;/div&gt;<span class=code-comment>&lt;!-- /wrapper --&gt;</span></code>
 *
 */

/**
 * You can add line numbers to your code examples but be warned, it requires
 * some pretty funky looking markup, e.g.:
 *
   <ol class=line-numbers>
       <li><code>.nav{</code></li>
       <li><code>    list-style:none;</code></li>
       <li><code>    margin-left:0;</code></li>
       <li><code>}</code></li>
       <li><code>    .nav > li,</code></li>
       <li><code>        .nav > li > a{</code></li>
       <li><code>            display:inline-block;</code></li>
       <li><code>           *display:inline-block;</code></li>
       <li><code>            zoom:1;</code></li>
       <li><code>        }</code></li>
   </ol>
 *
 * 1. Make the list look like code.
 * 2. Give the list flush numbers with a leading zero.
 * 3. Make sure lines of code donÔÇÖt wrap.
 * 4. Give the code form by forcing the `code` to honour white-space.
 */

/*------------------------------------*\
    $IMAGES
\*------------------------------------*/

/**
 * Demo: jsfiddle.net/inuitcss/yMtur
 */

/**
 * Fluid images.
 */

/**
 * Non-fluid images if you specify `width` and/or `height` attributes.
 */

/**
 * Rounded images.
 */

/**
 * Image placement variations.
 */

/**
 * Keep your images on your baseline.
 *
 * Please note, these will not work too nicely with fluid images and will
 * distort when resized below a certain width. Use with caution.
 */

/**
 * Images in `figure` elements.
 */

/*------------------------------------*\
    $LISTS
\*------------------------------------*/

/**
 * Remove vertical spacing from nested lists.
 */

/**
 * Have a numbered `ul` without the semantics implied by using an `ol`.
 */

/*ul*/

/*------------------------------------*\
    $TABLES
\*------------------------------------*/

/**
 * We have a lot at our disposal for making very complex table constructs, e.g.:
 *
   <table class="table--bordered  table--striped  table--data">
       <colgroup>
           <col class=t10>
           <col class=t10>
           <col class=t10>
           <col>
       </colgroup>
       <thead>
           <tr>
               <th colspan=3>Foo</th>
               <th>Bar</th>
           </tr>
           <tr>
               <th>Lorem</th>
               <th>Ipsum</th>
               <th class=numerical>Dolor</th>
               <th>Sit</th>
           </tr>
       </thead>
       <tbody>
           <tr>
               <th rowspan=3>Sit</th>
               <td>Dolor</td>
               <td class=numerical>03.788</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>32.210</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>47.797</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <th rowspan=2>Sit</th>
               <td>Dolor</td>
               <td class=numerical>09.640</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>12.117</td>
               <td>Lorem</td>
           </tr>
       </tbody>
   </table>
 *
 */

/**
 * Cell alignments
 */

/**
 * In the HTML above we see several `col` elements with classes whose numbers
 * represent a percentage width for that column. We leave one column free of a
 * class so that column can soak up the effects of any accidental breakage in
 * the table.
 */

/* 1/8 */

/* 1/4 */

/* 1/3 */

/* 3/8 */

/* 1/2 */

/* 5/8 */

/* 2/3 */

/* 3/4*/

/* 7/8 */

/**
 * Bordered tables
 */

/**
 * Striped tables
 */

/**
 * Data table
 */

/*------------------------------------*\
    $FORMS
\*------------------------------------*/

/**
 *
 * Demo: jsfiddle.net/inuitcss/MhHHU
 *
 */

/**
 * Text inputs
 *
 * Instead of a `[type]` selector for each kind of form input, we just use a
 * class to target any/every one, e.g.:
   <input type=text class=text-input>
   <input type=email class=text-input>
   <input type=password class=text-input>
 *
 */

/**
 * Group sets of form fields in a list, e.g.:
 *
   <ul class=form-fields>
       <li>
           <label />
           <input />
       </li>
       <li>
           <label />
           <select />
       </li>
       <li>
           <label />
           <input />
       </li>
   </ul>
 *
 */

/**
 * Labels
 *
 * Define a `.label` class as well as a `label` element. This means we can apply
 * label-like styling to meta-labels for groups of options where a `label`
 * element is not suitable, e.g.:
 *
   <li>
       <span class=label>Select an option below:</span>
       <ul class="multi-list  four-cols">
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 *
 */

/**
 * Extra help text in `label`s, e.g.:
 *
   <label>Card number <small class=additional>No spaces</small></label>
 *
 */

/*
 * Groups of checkboxes and radios, e.g.:
 *
   <li>
       <ul class=check-list>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 *
 */

/*
 * Labels in check-lists
 */

/**
 * Spoken forms are for forms that read like spoken word, e.g.:
 *
   <li class=spoken-form>
       Hello, my <label for=spoken-name>name</label> is
       <input type=text class=text-input id=spoken-name>. My home
       <label for=country>country</label> is
       <select id=country>
           <option>UK</option>
           <option>US</option>
           <option>Other</option>
       </select>
   </li>
 *
 */

/**
 * Extra help text displayed after a field when that field is in focus, e.g.:
 *
   <label for=email>Email:</label>
   <input type=email class=text-input id=email>
   <small class=extra-help>.edu emails only</small>
 *
 * We leave the help text in the document flow and merely set it to
 * `visibility:hidden;`. This means that it wonÔÇÖt interfere with anything once
 * it reappears.
 *
 */

/*small*/

/**
 * Objects and abstractions
 */

/**
 * Style trumps; helper and brand classes
 */

/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/

/**
 * Sizes in human readable format. These are used in conjunction with other
 * objects and abstractions found in inuit.css, most commonly the grid system
 * and faux flexbox.
 *
 * We have a mixin to generate our widths and their breakpoint-specific
 * variations.
 */

/**
* Whole
*/

/**
* Halves
*/

/**
* Thirds
*/

/**
* Quarters
*/

/**
* Fifths
*/

/**
* Sixths
*/

/**
* Eighths
*/

/**
* Tenths
*/

/**
* Twelfths
*/

/**
 * If you have set `$responsive` to ÔÇÿtrueÔÇÖ in `_vars.scss` then you now have
 * access to these classes. You can define at which breakpoint youÔÇÖd like an
 * element to be a certain size, e.g.:
 *
 * `<div class="g  one-quarter  lap-one-half  palm-one-whole"> ... </div>`
 *
 * This would create a `div` that, at ÔÇÿdesktopÔÇÖ sizes, takes up a quarter of the
 * horizontal space, a half of that space at ÔÇÿtabletÔÇÖ sizes, and goes full width
 * at ÔÇÿmobileÔÇÖ sizes.
 *
 * Demo: jsfiddle.net/inuitcss/WS4Ge
 *
 */

@media only screen and (max-width: 480px) {
  /**
  * Whole
  */

  /**
  * Halves
  */

  /**
  * Thirds
  */

  /**
  * Quarters
  */

  /**
  * Fifths
  */

  /**
  * Sixths
  */

  /**
  * Eighths
  */

  /**
  * Tenths
  */

  /**
  * Twelfths
  */
}

@media only screen and (min-width: 481px) and (max-width: 1023px) {
  /**
  * Whole
  */

  /**
  * Halves
  */

  /**
  * Thirds
  */

  /**
  * Quarters
  */

  /**
  * Fifths
  */

  /**
  * Sixths
  */

  /**
  * Eighths
  */

  /**
  * Tenths
  */

  /**
  * Twelfths
  */
}

@media only screen and (min-width: 481px) {
  /**
  * Whole
  */

  /**
  * Halves
  */

  /**
  * Thirds
  */

  /**
  * Quarters
  */

  /**
  * Fifths
  */

  /**
  * Sixths
  */

  /**
  * Eighths
  */

  /**
  * Tenths
  */

  /**
  * Twelfths
  */
}

@media only screen and (max-width: 1023px) {
  /**
  * Whole
  */

  /**
  * Halves
  */

  /**
  * Thirds
  */

  /**
  * Quarters
  */

  /**
  * Fifths
  */

  /**
  * Sixths
  */

  /**
  * Eighths
  */

  /**
  * Tenths
  */

  /**
  * Twelfths
  */
}

@media only screen and (min-width: 1024px) {
  /**
  * Whole
  */

  /**
  * Halves
  */

  /**
  * Thirds
  */

  /**
  * Quarters
  */

  /**
  * Fifths
  */

  /**
  * Sixths
  */

  /**
  * Eighths
  */

  /**
  * Tenths
  */

  /**
  * Twelfths
  */
}

/**
 * If you have set the additional `$responsive-extra` variable to ÔÇÿtrueÔÇÖ in
 * `_vars.scss` then you now have access to the following class available to
 * accomodate much larger screen resolutions.
 */

/* endif */

/*------------------------------------*\
    $PUSH
\*------------------------------------*/

/**
 * Push classes, to move grid items over to the right by certain amounts.
 */

/*------------------------------------*\
    $PULL
\*------------------------------------*/

/**
 * Pull classes, to move grid items over to the right by certain amounts.
 */

/*------------------------------------*\
    $BRAND
\*------------------------------------*/

/**
 * `.brand` is a quick and simple way to apply your brand face and/or color to
 * any element using a handy helper class.
 */

/*------------------------------------*\
    $HELPER
\*------------------------------------*/

/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesnÔÇÖt already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */

/**
 * Add/remove floats
 */

/**
 * Text alignment
 */

/**
 * Font weights
 */

/**
 * Add/remove margins
 */

/**
 * Add/remove paddings
 */

/**
 * Pull items full width of `.island` parents.
 */

/**
 * Add a help cursor to any element that gives the user extra information on
 * `:hover`.
 */

/**
 * Mute an object by reducing its opacity.
 */

/**
 * Align items to the right where they imply progression/movement forward, e.g.:
 *
   <p class=proceed><a href=#>Read more...</a></p>
 *
 */

/**
 * Add a right-angled quote to links that imply movement, e.g.:
 *
   <a href=# class=go>Read more</a>
 *
 */

/**
 * Apply capital case to an element (usually a `strong`).
 */

/**
 * Hide content off-screen without resorting to `display:none;`, also provide
 * breakpoint specific hidden elements.
 */

/* endif */

/**
 * Start building our own files
 */

/**
 * Basic configuration for sprite autogeneration should you need it
 */

/*------------------------------------*\
    $SPRITE
\*------------------------------------*/

/**
 * Compass can auto generate sprites and sprite classes for you.
 *
 * If you expect to have a large number of sprites, you may want to consider grouping them into categories such as 'social', or 'thumbnails'.
 *
 * Sprite generation can be customised to add spacing around entire groups, or even individual icons if that's what you need. See this video for more information: http://www.youtube.com/watch?v=8ZHZPxIjiS8&hd=1
 *
 * Name hover states with *_hover.png and Compass will automatically recognise them as hover states of the original icon
 */

/**
 * Open example file below to see how media queries are to be structured
 */